#!/usr/bin/env python
# Copyright (c) 2005-2006 XenSource, Inc. All use and distribution of this 
# copyrighted material is governed by and subject to terms and conditions 
# as licensed by XenSource, Inc. All other rights reserved.
# Xen, XenSource and XenEnterprise are either registered trademarks or 
# trademarks of XenSource Inc. in the United States and/or other countries.

###
# XEN CLEAN INSTALLER
# Boot script
#
# written by Mark Nijmeijer and Andrew Peace

import commands
import sys
import os
import os.path

# user interface:
import tui
import tui.init
import tui.progress
import generalui

import install
import product
import init_constants
import xelogging
import netutil
import util
import restore
import driver
import p2v
from netinterface import *

from version import *
from constants import EXIT_OK, EXIT_ERROR, EXIT_USER_CANCEL

# Attempt to configure the network:
def configureNetworking(ui, device):
    if ui:
        ui.progress.showMessageDialog(
            "Preparing for installation",
            "Attempting to configure networking..."
            )

    nethw = netutil.scanConfiguration()
    netcfg = {}
    for i in nethw.keys():
        netcfg[i] = NetInterface(NetInterface.DHCP, nethw[i].hwaddr)

    netutil.writeDebStyleInterfaceFile(netcfg, '/etc/network/interfaces')

    if device.startswith('eth'):
        if nethw.has_key(device):
            netutil.ifup(device)
    else:
        # MAC address
        matching_list = filter(lambda x: x.hwaddr == device, nethw.values())
        if len(matching_list) == 1:
            netutil.ifup(matching_list[0].name)

    if ui:
        ui.progress.clearModelessDialog()

def main(args):
    # switch to ISO 8859-1 mode so line drawing characters work as expected on 
    # vt100 terminals.
    print "\033%@"

    # log to tty3
    xelogging.openLog('/dev/tty3')

    operation = None
    ui = tui
    interactive = True
    answer_device = 'eth0'
    driver_repos = []

    for (opt, val) in args.items():
        if opt == "--install":
            operation = init_constants.OPERATION_INSTALL
        elif opt == "--p2v":
            operation = init_constants.OPERATION_P2V
        elif opt == "--answerfile":
            interactive = False
        elif opt == "--rt_answerfile":
            interactive = False
            ui = None
            xelogging.openLog(sys.stdout)
        elif opt == '--answerfile_device':
            answer_device = val.lower()

    # check that an answerfile was specified if we're being non-interactive:
    if not interactive and not operation:
        xelogging.log("No operation specified for answerfile - dropping back to interactive mode.")
        interactive = True
        ui = tui

    # start the user interface:
    if ui:
        xelogging.log("Starting 'init' user interface")
        ui.init_ui()

    # let the user choose what they would like to do:
    if interactive:
        # choose keymap
        kmap = ui.init.get_keymap()
        args['--keymap'] = kmap
        xelogging.log("Loading keymap %s" % kmap)
        util.runCmd2(["/bin/loadkeys", kmap])

        xelogging.writeLog("/tmp/startup-log")
    else:
        configureNetworking(ui, answer_device)

    backups = product.findXenSourceBackups()
    try:
        while True:
            # if interactive, set the operation:
            if interactive and not operation:
                operation = ui.init.choose_operation(len(backups) > 0)

            if operation == init_constants.OPERATION_REBOOT:
                break

            # install/upgrade:
            elif operation == init_constants.OPERATION_INSTALL:
                xelogging.log("Starting installation/upgrade")

                args['--extrarepo'] = driver_repos
                rc = install.go(ui, args)

            # load a driver:
            elif operation == init_constants.OPERATION_LOAD_DRIVER:
                driver_repos.extend(driver.doInteractiveLoadDriver(ui))
                rc = None

            # restore:
            elif operation == init_constants.OPERATION_RESTORE:
                xelogging.log("Starting restore")
                rc = restore.go(ui)

            # P2V:
            elif operation == init_constants.OPERATION_P2V:
                xelogging.log("Starting P2V")
                rc = p2v.go(args, ui)

            operation = None
            # if we're non-interactive, or weren't canceled, force us to exit:
            if rc == EXIT_OK or rc == EXIT_ERROR or not interactive:
                break

    finally:
        if ui:
            ui.end_ui()

        # stop logging to tty3:
        xelogging.closeLogs()

    try:
        if os.readlink('/proc/self/fd/0') != '/dev/console':
            print "Not on the console, not rebooting"
            return False
    except:
        pass
    return True


if __name__ == "__main__":
    reboot = main(util.splitArgs(sys.argv[1:]))
    if reboot:
        os.system("reboot")
