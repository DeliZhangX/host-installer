#!/usr/bin/env python
###
# XEN CLEAN INSTALLER
# Boot script
#
# written by Mark Nijmeijer and Andrew Peace
# Copyright XenSource Inc. 2006

import commands
import sys
import os
import os.path
from getopt import getopt, GetoptError
import shutil

import init_tui
import init_simpleui
import xelogging
import netutil
import util
import hardware
from hardware import module_map

from version import *
from constants import EXIT_OK, EXIT_ERROR, EXIT_USER_CANCEL

base_modules = ['sd-mod',
                'sr-mod',
                'dm-mod',
                'loop',
                'ata_piix',
                'rtc',
                'reiserfs',
                'ext3']

MODE_INTERACTIVE = 0
MODE_INSTALL = 1
MODE_UPGRADE = 2
MODE_P2V = 3

# Exception that is thrown if we detect that the user has
# tried to use two consoles to perform an installation
class AlreadyActivated(Exception):
    pass

# Specify the current console as the one that is to be used
# for installation - after this is called the user will be
# given an error message if they try to run the installer on
# a different console.
def activateScreen():
    lock_filename = "/tmp/.install-activated"
    if os.path.exists(lock_filename):
        rc, tty = commands.getstatusoutput("/usr/bin/tty")
        assert rc == 0
        activefile = open(lock_filename, 'r')
        active_tty = activefile.readline().strip()
        activefile.close()
        if active_tty != tty:
            raise AlreadyActivated()
    else:
        rc, tty = commands.getstatusoutput("/usr/bin/tty")
        assert rc == 0
        activefile = open(lock_filename, 'w')
        activefile.write(tty)
        activefile.close()

# Use the 'discover' tool to detect hardware and load needed
# modules;
#
# This has turned into a bit of a hack.  The 'hwdetect' script
# uses information directly from the kernel build to find hardware
# (i.e. modules.pcimap), but I don't entirely understand where
# these come from or oif they're complete.
def discoverHardware():
    rc1, out1 = commands.getstatusoutput("discover --enable-all --module ide")
    rc2, out2 = commands.getstatusoutput("discover --enable-all --module scsi")
    rc3, out3 = commands.getstatusoutput("discover --enable-all --module all")
    rc4, out4 = commands.getstatusoutput("/opt/xensource/installer/hwdetect")
    out = out1 + "\n" + out2 + "\n" + out3 + "\n" + out4
    out = out.split("\n")
    
    modules = []
    for m in out:
        if m not in modules and m != "":
            modules.append(m)
    modules = [x.replace('_', '-') for x in modules]

    # Load our modules, applying the mapping from the hardware module:
    modlist_file = open('/tmp/module-order', 'w')
    for mod in modules:
        if module_map.has_key(mod):
            if module_map[mod] == []:
                xelogging.log("Ignoring module %s" % mod)
            else:
                xelogging.log("Discover found %s - we think we need %s" % (mod, module_map[mod]))
                for mymod in module_map[mod]:
                    xelogging.log("Loading %s" % mymod)
                    util.runCmd("modprobe %s" % mymod)
                    modlist_file.write(mymod + "\n")
        else:
            # just continue loading the module
            xelogging.log('Loading %s' % mod)
            util.runCmd('modprobe %s' % mod)
            modlist_file.write(mod + "\n")
    
    xelogging.log("All discovered modules have been loaded.")

    # load base modules
    for m in base_modules:
        os.system("modprobe %s" % m)
        modlist_file.write(m + "\n")
    modlist_file.close()

    # if we're in an older (pre udev-091) filesystem, we need
    # to call udevstart as udevd wasn't working correctly:
    if os.path.exists("/sbin/udevstart"):
        os.system("udevstart")

    # we should wait for all udev events to complete if we have
    # that capability:
    if os.path.exists("/sbin/udevsettle"):
        os.system("udevsettle --timeout=10")

# Attempt to configure the network:
def configureNetworking():
    # do we need to make the network directory writeable?
    if not os.path.ismount('/etc/network/'):
        shutil.copytree('/etc/network', '/tmp/network')
        util.bindMount('/tmp/network', '/etc/network')

    interfaces = netutil.getNetifList()
    netcfg = {}
    for i in interfaces:
        netcfg[i] = { 'use-dhcp': True }

    netutil.writeDebStyleInterfaceFile(netcfg, '/etc/network/interfaces')

    for i in interfaces:
        netutil.ifup(i)

def main():
    # clog fds: add tty3
    clog_fds = []
    try:
        ttylog = open('/dev/tty3', 'w')
        clog_fds.append(ttylog)
        xelogging.continuous_logs.append(ttylog)
    except:
        xelogging.log("Error opening tty3 as a log output.")

    # disable all kernel printing
    pk = open('/proc/sys/kernel/printk', 'w')
    pk.write('1')
    pk.close()

    # mount all fstab filesystems if they're not already mounted:
    util.runCmd('mount -a')
    if os.system("grep -q 'sysfs' /proc/mounts") != 0:
        util.runCmd('mount -t sysfs none /sys')

    # start portmap so NFS mounting works:
    util.runCmd('portmap')

    # parse options:
    try:
        (opts, _) = getopt(sys.argv[1:],
                           "",
                           ["install",
                            "upgrade",
                            "p2v",
                            "answerfile=",
                            "verbose-answerfile=",
                            "modules=",
                            "output="])
    except GetoptError:
        print "Incorrect arguments."
        sys.exit(1)

    mode = MODE_INTERACTIVE
    ui_package = init_tui
    modules = []
    active_output = None
    answerfile = None
    verbose_answerfile = None
    for (opt, val) in opts:
        if opt == "--install":
            mode = MODE_INSTALL
        if opt == "--upgrade":
            mode = MODE_UPGRADE
        if opt == "--p2v":
            mode = MODE_P2V
        if opt == "--answerfile":
            answerfile = val
        if opt == "--verbose-answerfile":
            ui_package = init_simpleui
            xelogging.continuous_logs.append(sys.stdout)
            verbose_answerfile = val
        if opt == "--modules":
            modules = val.split(",")
        if opt == "--output":
            active_output = val

    # start the user interface:
    xelogging.log("Starting 'init' user interface")
    ui_package.init_ui()

    def doHardwareDetection():
        # detect hardware:
        ui_package.showMessageDialog("Preparing for installation", "Your system hardware is being detected and configured...")
        discoverHardware()
        ui_package.clearModelessDialog()
        
        for m in modules:
            util.runCmd('modprobe %s' % m)

        # try to configure the network:
        ui_package.showMessageDialog("Preparing for installation", "Attempting to configure networking...")
        configureNetworking()
        ui_package.clearModelessDialog()
                    
        # we'll write out a log at this point, so that the user can
        # collect later:
        xelogging.writeLog("/tmp/startup-log")

    # let the user choose what they would like to do:
    if mode == MODE_INTERACTIVE:
        firstTime = True
        try:
            while True:
                operation = ui_package.choose_operation()

                # activate installation on this screen:
                try:
                    activateScreen()
                except AlreadyActivated:
                    ui_package.already_activated()
                    break

                # reboot (process this action before hardware
                # detection to save the weirdness of detecting
                # hardware to then immediately reboot):
                if operation == -1:
                    break

                # detect hardware if we've not done so already
                if firstTime:
                    doHardwareDetection()
                    firstTime = False

                # clean install:
                if operation == 0:
                    xelogging.log("Starting clean installation")
                    rc = os.system("/opt/xensource/installer/clean-installer --clog /dev/tty3")
                    if rc == EXIT_OK or rc == EXIT_ERROR: 
                        break
                    else:
                        pass

                # upgrade install:
                elif operation == 1:
                    xelogging.log("Starting upgrade installation")
                    rc = os.system("/opt/xensource/installer/clean-installer --upgrade --clog /dev/tty3")
                    if rc == EXIT_OK or rc == EXIT_ERROR:
                        break
                    else:
                        pass

                # P2V:
                elif operation == 2:
                    xelogging.log("Starting P2V")
                    rc = os.system("/opt/xensource/installer/p2v.py")
                    if rc == EXIT_OK or rc == EXIT_ERROR:
                        break
                    else:
                        pass

        except Exception:
            ui_package.end_ui()
            raise

    # non-interactive:
    else:
        # terminate on any screen that wasn't supposed to be used:
        if not active_output:
            active_output = "tty1"
            xelogging.log("No output TTY specified so defaulting to tty1.")
        try:
            rc, my_tty = commands.getstatusoutput("tty")
            my_tty = my_tty.strip('\n')
            
            if os.path.basename(my_tty) == active_output:
                activateScreen()
            else:
                xelogging.log("Stopping installation in this process because this tty isn't the one that the installation should proceed on.")
                xelogging.log("(Current tty is    : %s)" % os.path.basename(my_tty))
                xelogging.log("(Requested tty was : %s)" % active_output)
                xelogging.log("Note that you should either specify tty1 or ttyS0 as your install TTY if you are using the output= option.")
                ui_package.already_activated()
                sys.exit(0)
        except AlreadyActivated:
            ui_package.already_activated()
            sys.exit(0)

        if mode == MODE_INSTALL:
            doHardwareDetection()
            if answerfile:
                os.system("/opt/xensource/installer/clean-installer --answerfile %s --clog /dev/tty3" % answerfile)
            elif verbose_answerfile:
                os.system("/opt/xensource/installer/clean-installer --verbose-answerfile %s" % verbose_answerfile)
            else:
                os.system("/opt/xensource/installer/clean-installer --clog /dev/tty3")
            os.system("reboot")

        elif mode == MODE_UPGRADE:
            doHardwareDetection()
            if answerfile:
                os.system("/opt/xensource/installer/clean-installer --upgrade --clog /dev/tty3")
            elif verbose_answerfile:
                ui_package.end_ui()
                os.system("/opt/xensource/installer/clean-installer --upgrade")
            else:
                os.system("/opt/xensource/installer/clean-installer --upgrade --clog /dev/tty3")
            os.system("reboot")
                
        elif mode == MODE_P2V:
            doHardwareDetection()
            if answerfile:
                os.system("/opt/xensource/installer/p2v.py --answerfile %s --clog /dev/tty3" % answerfile)
            else:
                os.system("/opt/xensource/installer/p2v.py --clog /dev/tty3" % answerfile)
            os.system("reboot")

    # Everything finished - from here we just shut down and reboot

    if ui_package:
        ui_package.end_ui()

    if os.path.ismount('/etc/network'):
        util.umount('/etc/network')

    # stop logging to tty3:
    for logfd in clog_fds:
        try:
            xelogging.continuous_logs.remove(logfd)
        except:
            pass
        logfd.close()

if __name__ == "__main__":
    main()
    os.system("reboot")
    
