#!/usr/bin/env python
###
# XEN CLEAN INSTALLER
# Main script
#
# written by Andrew Peace
# Copyright XenSource Inc. 2006

import os
import sys
import traceback
import string

# user-interface stuff:
import tui
import generalui
import util
import pyanswerfile_ui
import answerfile_ui
import uicontroller
import constants

# hardware
import diskutil
import netutil

# backend
import backend

# general
import xelogging
from getopt import getopt, GetoptError

def main():
    ui_package = tui
    isUpgrade = False
    
    #disable all kernel printing
    util.runCmd("echo 1 > /proc/sys/kernel/printk")

    # sync hwclock to syscock ready for date/time stuff
    util.runCmd("hwclock --utc --hwtosys")
    
    try:
        (opts, _) = getopt(sys.argv[1:],
                           "",
                           ["pyanswerfile=",
                            "answerfile=",
                            "verbose-pyanswerfile=",
                            "verbose-answerfile=",
                            "upgrade-answerdev=",
                            "upgrade",
                            "clog="])
    except GetoptError:
        print "This program takes no arguments."
        sys.exit(1)

    # prepare LVM - we need this very early now.
    os.environ['LVM_SYSTEM_DIR'] = '/tmp/lvm'
    if not os.path.exists('/tmp/lvm'):
    	os.mkdir('/tmp/lvm')

    clog_fds = []

    results = {}

    for (opt, val) in opts:
        if opt == "--pyanswerfile":
            pyanswerfile_ui.specifySubUI(ui_package)
            pyanswerfile_ui.specifyAnswerFile(val)
            ui_package = pyanswerfile_ui
        if opt == "--answerfile":
            answerfile_ui.specifySubUI(ui_package)
            answerfile_ui.specifyAnswerFile(val)
            ui_package = answerfile_ui
        if opt == "--verbose-answerfile":
            answerfile_ui.specifyAnswerFile(val)
            ui_package = answerfile_ui
            xelogging.continuous_logs.append(sys.stdout)
        if opt == "--verbose-pyanswerfile":
            pyanswerfile_ui.specifyAnswerFile(val)
            ui_package = pyanswerfile_ui
            xelogging.continuous_logs.append(sys.stdout)
        if opt == "--upgrade-answerdev":
            pyanswerfile_ui.specifySubUI(ui_package)
            pyanswerfile_ui.specifyAnswerFileDevice(val)
            ui_package = pyanswerfile_ui
        if opt == "--clog":
            try:
                fd = open(val, "w")
                clog_fds.append(fd)
                xelogging.continuous_logs.append(fd)
            except:
                print "Error adding continuous log %s." % val
        if opt == "--upgrade":
            results['upgrade'] = True
            isUpgrade = True

    # log the modules that we loaded:
    xelogging.log("All needed modules should now be loaded. We have loaded:")
    util.runCmd("lsmod")

    try:
        xelogging.log("Starting user interface")
        ui_package.init_ui(results, False)

        if results.has_key('usesettings'):
            if results['usesettings'] == None or results['usesettings'] == False:
                # set the ui_package back to the original
                ui_package = tui

        disks = diskutil.getQualifiedDiskList()
        netifs = netutil.getNetifList()

        # make sure we have discovered at least one disk and
        # at lesat one network interface:
        if len(disks) == 0:
            raise Exception, "No disks found on this host."

        if len(netifs) == 0:
            raise Exception, "No network interfaces found on this host."

        # make sure that we have enough disk space:
        xelogging.log("Found disks: %s" % str(disks))
        diskSizes = [diskutil.getDiskDeviceSize(x) for x in disks]
        diskSizesGB = [diskutil.blockSizeToGBSize(x) for x in diskSizes]
        xelogging.log("Disk sizes: %s" % str(diskSizesGB))

        bigdisks = filter(lambda x: x >= constants.min_primary_disk_size,
                          diskSizesGB)
        if bigdisks == []:
            raise Exception, "Not enough disk space to proceed."
        else:
            if isUpgrade:
                seq = [ ui_package.upgrade_screen ]
                if not backend.CheckInstalledVersion(results):
                    ui_package.error_dialog("Upgrade Failed. Can't find an old installation to upgrade")
                    raise Exception("Failed to upgrade")
            else:
                seq = [ ui_package.welcome_screen,
                        ( generalui.disk_selection, { 'ui-package': ui_package  }) ]

            seq += [ ui_package.confirm_erase_volume_groups,
                     ui_package.confirm_wipe_existing,
                     ui_package.get_keyboard_type,
                     ui_package.get_keymap,
                     (ui_package.select_installation_source, { 'cd-available': True}),
                     ui_package.get_http_source,
                     ui_package.get_nfs_source,
                     ui_package.verify_source,
                     ui_package.get_root_password,
                     ui_package.get_timezone_region,
                     ui_package.get_timezone_city,
                     ui_package.get_time_configuration_method,
                     ui_package.get_ntp_servers,
                     ui_package.determine_basic_network_config,
                     ui_package.get_name_service_configuration,
                     ( generalui.confirm_installation,
                       { 'ui-package': ui_package }) ]

            uiexit = uicontroller.runUISequence(seq, results)

            if uiexit != uicontroller.EXIT:
                xelogging.log("Starting actual installation")       
                backend.performInstallation(results, ui_package)
                
                if not isUpgrade:
                    seq = [ ui_package.installation_complete ]
                else:
                    seq = [ ui_package.upgrade_complete ]
        
                uicontroller.runUISequence(seq, results)

                xelogging.log("The installation completed successfully.")
            else:
                xelogging.log("The user aborted the installation from within the user interface.")    
    except Exception, e:
        # first thing to do is to get the traceback and log it:
        (t, v, tb) = sys.exc_info()
        err = string.join(traceback.format_exception(t,v,tb))
        xelogging.log("INSTALL FAILED.")
        xelogging.log("A fatal exception occurred:")
        xelogging.log(err)

        # now write out logs where possible:
        xelogging.writeLog("/tmp/install-log")

        # now display a friendly error dialog:
        if str(e) != "":
            ui_package.error_dialog("An error has occurred and the installation must be aborted.  The error was:\n\n%s\n\nPlease refer to your user guide, or XenSource technical support, for further details." % str(e))
        else:
            ui_package.error_dialog("An error has occurred and the installation must be aborted.  The details of the error can be found in the installation log, which will be written to /tmp/install-log and /boot/install-log on your hard disk if possible.\n\nPlease refer to your user guide or XenSource technical support for more details.")

        # try to clean up any mounted volumes:
        try:
            backend.cleanup_umount()
        except Exception:
            pass

        # clean up the screen
        ui_package.end_ui()

        # and now on the disk if possible:
        backend.writeLog(results)

        # close continuous logs:
        for logfd in clog_fds:
            try:
                xelogging.continuous_logs.remove(logfd)
            except:
                pass
            logfd.close()

        # exit with failure status:
        return 1

    else:
        xelogging.log("Shutting down user interface")
        ui_package.end_ui()
        
        # close continuous logs:
        for logfd in clog_fds:
            try:
                xelogging.continuous_logs.remove(logfd)
            except:
                pass
            logfd.close()

        # put the log in /tmp:
        xelogging.writeLog("/tmp/install-log")

        # and now on the disk if possible:
        backend.writeLog(results)

        # exit with success status:
        return 0


if __name__ == "__main__":
    sys.exit(main())
