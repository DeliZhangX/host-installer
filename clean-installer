#!/usr/bin/env python
###
# XEN CLEAN INSTALLER
# Main script
#
# written by Andrew Peace
# Copyright XenSource Inc. 2006

import os
import sys
import traceback
import string

# user-interface stuff:
import tui
import generalui
import util
import pyanswerfile_ui
import answerfile_ui
import uicontroller
import constants

# hardware
import diskutil
import netutil

# backend
import backend

# general
import xelogging
from getopt import getopt, GetoptError

def main():
    ui_package = tui
    isUpgrade = False
    
    #disable all kernel printing
    util.runCmd("echo 1 > /proc/sys/kernel/printk")

    # sync hwclock to syscock ready for date/time stuff
    util.runCmd("hwclock --utc --hwtosys")
    
    try:
        (opts, _) = getopt(sys.argv[1:],
                           "",
                           ["pyanswerfile=",
                            "answerfile=",
                            "verbose-pyanswerfile=",
                            "upgrade-answerdev=",
                            "upgrade",
                            "clog="])
    except GetoptError:
        print "This program takes no arguments."
        sys.exit(1)

    # prepare LVM - we need this very early now.
    os.environ['LVM_SYSTEM_DIR'] = '/tmp/lvm'
    if not os.path.exists('/tmp/lvm'):
    	os.mkdir('/tmp/lvm')

    clog_fds = []

    results = {}

    for (opt, val) in opts:
        if opt == "--pyanswerfile":
            pyanswerfile_ui.specifySubUI(ui_package)
            pyanswerfile_ui.specifyAnswerFile(val)
            ui_package = pyanswerfile_ui
        if opt == "--answerfile":
            answerfile_ui.specifySubUI(ui_package)
            answerfile_ui.specifyAnswerFile(val)
            ui_package = answerfile_ui
        if opt == "--verbose-pyanswerfile":
            pyanswerfile_ui.specifyAnswerFile(val)
            ui_package = pyanswerfile_ui
            xelogging.continuous_logs.append(sys.stdout)
        if opt == "--upgrade-answerdev":
            pyanswerfile_ui.specifySubUI(ui_package)
            pyanswerfile_ui.specifyAnswerFileDevice(val)
            ui_package = pyanswerfile_ui
        if opt == "--clog":
            try:
                fd = open(val, "w")
                clog_fds.append(fd)
                xelogging.continuous_logs.append(fd)
            except:
                print "Error adding continuous log %s." % val
        if opt == "--upgrade":
            results['upgrade'] = True
            isUpgrade = True

    # log the modules that we loaded:
    xelogging.log("All needed modules should now be loaded. We have loaded:")
    util.runCmd("lsmod")

    try:
        xelogging.log("Starting user interface")
        ui_package.init_ui(results, False)

        if results.has_key('usesettings'):
            if results['usesettings'] == None or results['usesettings'] == False:
                # set the ui_package back to the original
                ui_package = tui

        disks = diskutil.getQualifiedDiskList()
        netifs = netutil.getNetifList()

        # make sure we have discovered at least one disk and
        # at lesat one network interface:
        if len(disks) == 0:
            xelogging.log("INSTALL FAILURE: No disks found on this host.")
            ui_package.no_disks()
            raise Exception("No disks found on this host.")

        if len(netifs) == 0:
            xelogging.log("INSTALL FAILURE: No network interfaces found on this host.")
            ui_package.no_netifs()
            raise Exception("No network interfaces found on this host.")

        # make sure that we have enough disk space:
        xelogging.log("Found disks: %s" % str(disks))
        diskInfo = map(lambda x: diskutil.getExtendedDiskInfo(x), disks)
        xelogging.log("Extended disk info: %s" % str(diskInfo))

        if len(filter(lambda x: diskutil.getHumanDiskSize(x[2]) >= constants.min_primary_disk_size, diskInfo)) == 0:
            xelogging.log("Not enough disk space to proceed.")
            seq = [ ui_package.not_enough_space_screen ]
            uicontroller.runUISequence(seq, results)
        else:
            if isUpgrade:
                seq = [ ui_package.upgrade_screen ]
                if not backend.CheckInstalledVersion(results):
                    ui_package.error_dialog("Upgrade Failed. Can't find an old installation to upgrade")
                    raise Exception("Failed to upgrade")
            else:
                seq = [ ui_package.welcome_screen,
                        ( generalui.disk_selection, { 'ui-package': ui_package  }) ]

            seq += [ ui_package.confirm_erase_volume_groups,
                     ui_package.confirm_wipe_existing,
                     (ui_package.select_installation_source, { 'cd-available': True}),
                     ui_package.get_http_source,
                     ui_package.get_nfs_source,
                     ui_package.get_root_password,
                     ui_package.get_timezone_region,
                     ui_package.get_timezone_city,
                     ui_package.set_time,
                     ui_package.determine_basic_network_config,
                     ui_package.get_name_service_configuration,
                     ( generalui.confirm_installation,
                       { 'ui-package': ui_package }) ]

            uiexit = uicontroller.runUISequence(seq, results)

            if uiexit != uicontroller.EXIT:
                xelogging.log("Starting actual installation")       
                backend.performInstallation(results, ui_package)
                
                if not isUpgrade:
                    seq = [ ui_package.installation_complete ]
                else:
                    seq = [ ui_package.upgrade_complete ]
        
                uicontroller.runUISequence(seq, results)
            else:
                xelogging.log("The user aborted the installation from within the user interface.")    
    except Exception:
        (t, v, tb) = sys.exc_info()
        err = traceback.format_exception(t,v,tb)
        ui_package.error_dialog(string.join(err))

        # clean up the screen
        ui_package.end_ui()

        #umount volumes
        try:
            backend.cleanup_umount()
        except Exception:
            pass

        # close continuous logs:
        for logfd in clog_fds:
            try:
                xelogging.continuous_logs.remove(logfd)
            except:
                pass
            logfd.close()
            
        raise

    xelogging.log("Shutting down user interface")
    ui_package.end_ui()

    # close continuous logs:
    for logfd in clog_fds:
        try:
            xelogging.continuous_logs.remove(logfd)
        except:
            pass
        logfd.close()

    backend.writeLog(results)


if __name__ == "__main__":
    main()
