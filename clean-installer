#!/usr/bin/env python
###
# XEN CLEAN INSTALLER
# Main script
#
# written by Andrew Peace
# Copyright XenSource Inc. 2006

# user-interface stuff:
import tui
import generalui
import pyanswerfile_ui
import uicontroller

# backend
import backend

# general
import sys
import logging
from getopt import getopt

ui_package = tui

def main():
    global ui_package
    isUpgrade = False
    
    #disable all kernel printing
    generalui.runCmd("echo 1 > /proc/sys/kernel/printk")
    
    try:
        (opts, args) = getopt(sys.argv[1:],
                              "",
                              ["pyanswerfile=",
                               "verbose-pyanswerfile=",
                               "upgrade",
                               "clog="])
    except Exception, e:
        print "This program takes no arguments."
        sys.exit(1)

    clog_fds = []

    results = {}

    for (opt, val) in opts:
        if opt == "--pyanswerfile":
            pyanswerfile_ui.specifySubUI(ui_package)
            pyanswerfile_ui.specifyAnswerFile(val)
            ui_package = pyanswerfile_ui
        if opt == "--verbose-pyanswerfile":
            pyanswerfile_ui.specifyAnswerFile(val)
            ui_package = pyanswerfile_ui
            logging.continuous_logs.append(sys.stdout)
        if opt == "--clog":
            try:
                fd = open(val, "w")
                clog_fds.append(fd)
                logging.continuous_logs.append(fd)
            except:
                print "Error adding continuous log %s." % val
        if opt == "--upgrade":
        	results['upgrade'] = True
        	isUpgrade = True

    try:
        ui_package.init_ui(results, False)
        seq = [ ui_package.get_root_password,
                ui_package.get_timezone,
                ui_package.set_time,
                ui_package.determine_basic_network_config,
                ui_package.get_name_service_configuration,
                ( generalui.confirm_installation, { 'ui-package': ui_package }) ]
		
        if not isUpgrade:
            seq.insert(0, ( generalui.disk_selection, { 'ui-package': ui_package  }) )
            seq.insert(0, ui_package.welcome_screen)
        else:
            seq.insert(0, ui_package.upgrade_screen )
            backend.CheckInstalledVersion(results)

        uicontroller.runUISequence(seq, results)
	
        backend.performInstallation(results, ui_package)
        
        if not isUpgrade:
        	seq = [ ui_package.installation_complete ]
        else:
        	seq = [ ui_package.upgrade_complete ]
        
        uicontroller.runUISequence(seq, results)
    except Exception, e:
        # clean up the screen
        ui_package.end_ui()

        # close continuous logs:
        for logfd in clog_fds:
            try:
                logging.continuous_logs.remove(logfd)
            except:
                pass
            logfd.close()
            
        raise
        
    ui_package.end_ui()

    # close continuous logs:
    for logfd in clog_fds:
        try:
            logging.continuous_logs.remove(logfd)
        except:
            pass
        logfd.close()

    backend.writeLog(results)


if __name__ == "__main__":
    main()
