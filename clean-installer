#!/usr/bin/env python
###
# XEN CLEAN INSTALLER
# Main script
#
# written by Andrew Peace
# Copyright XenSource Inc. 2006

# user-interface stuff:
import tui
import generalui
import util
import pyanswerfile_ui
import uicontroller
import sys
import traceback
import string

import constants

# backend
import backend

# general
import logging
from getopt import getopt, GetoptError

def main():
    ui_package = tui
    isUpgrade = False
    
    #disable all kernel printing
    util.runCmd("echo 1 > /proc/sys/kernel/printk")

    # sync hwclock to syscock ready for date/time stuff
    util.runCmd("hwclock --utc --hwtosys")
    
    try:
        (opts, _) = getopt(sys.argv[1:],
                           "",
                           ["pyanswerfile=",
                            "verbose-pyanswerfile=",
                            "upgrade-answerdev=",
                            "upgrade",
                            "clog="])
    except GetoptError:
        print "This program takes no arguments."
        sys.exit(1)

    clog_fds = []

    results = {}

    for (opt, val) in opts:
        if opt == "--pyanswerfile":
            pyanswerfile_ui.specifySubUI(ui_package)
            pyanswerfile_ui.specifyAnswerFile(val)
            ui_package = pyanswerfile_ui
        if opt == "--verbose-pyanswerfile":
            pyanswerfile_ui.specifyAnswerFile(val)
            ui_package = pyanswerfile_ui
            logging.continuous_logs.append(sys.stdout)
        if opt == "--upgrade-answerdev":
            pyanswerfile_ui.specifySubUI(ui_package)
            pyanswerfile_ui.specifyAnswerFileDevice(val)
            ui_package = pyanswerfile_ui
        if opt == "--clog":
            try:
                fd = open(val, "w")
                clog_fds.append(fd)
                logging.continuous_logs.append(fd)
            except:
                print "Error adding continuous log %s." % val
        if opt == "--upgrade":
            results['upgrade'] = True
            isUpgrade = True

    try:
        logging.log("Starting user interface")
        ui_package.init_ui(results, False)

        # first, make sure that we have enough disk space:
        disks = generalui.getDiskList()
        logging.log("Found disks: %s" % str(disks))
        diskInfo = map(lambda x: generalui.getExtendedDiskInfo(x), disks)
        logging.log("Extended disk info: %s" % str(diskInfo))

        if len(filter(lambda x: generalui.getDiskSizeGB(x[2]) >= constants.min_primary_disk_size, diskInfo)) == 0:
            logging.log("Not enough disk space to proceed.")
            seq = [ ui_package.not_enough_space_screen ]
            uicontroller.runUISequence(seq, results)
        else:
            seq = [ ui_package.get_root_password,
                    ui_package.get_timezone,
                    ui_package.set_time,
                    ui_package.determine_basic_network_config,
                    ui_package.get_name_service_configuration,
                    ( generalui.confirm_installation,
                      { 'ui-package': ui_package }) ]
                
            if not isUpgrade:
                seq.insert(0, ( generalui.disk_selection, { 'ui-package': ui_package  }) )
                seq.insert(0, ui_package.welcome_screen)
            else:
                seq.insert(0, ui_package.upgrade_screen )
                if not backend.CheckInstalledVersion(results):
                    ui_package.error_dialog("Upgrade Failed. Can't find an old installation to upgrade")
                    raise Exception("Failed to upgrade")

            uicontroller.runUISequence(seq, results)

            logging.log("Starting actual installation")       
            backend.performInstallation(results, ui_package)
        
            if not isUpgrade:
                seq = [ ui_package.installation_complete ]
            else:
                seq = [ ui_package.upgrade_complete ]
        
            uicontroller.runUISequence(seq, results)
    except Exception:
        (t, v, tb) = sys.exc_info()
        err = traceback.format_exception(t,v,tb)
        ui_package.error_dialog(string.join(err))

        # clean up the screen
        ui_package.end_ui()

        #umount volumes
        backend.cleanup_umount()

        # close continuous logs:
        for logfd in clog_fds:
            try:
                logging.continuous_logs.remove(logfd)
            except:
                pass
            logfd.close()
            
        raise

    logging.log("Shutting down user interface")
    ui_package.end_ui()

    # close continuous logs:
    for logfd in clog_fds:
        try:
            logging.continuous_logs.remove(logfd)
        except:
            pass
        logfd.close()

    backend.writeLog(results)


if __name__ == "__main__":
    main()
